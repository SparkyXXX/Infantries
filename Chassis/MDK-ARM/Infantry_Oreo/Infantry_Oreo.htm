<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Infantry_Oreo\Infantry_Oreo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Infantry_Oreo\Infantry_Oreo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Wed Jul 10 11:25:52 2024
<BR><P>
<H3>Maximum Stack Usage =        640 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Chassis_Task &rArr; OmmiChassis_Output &rArr; PowerControl &rArr; PredictPower &rArr; __aeabi_dmul
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b8]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[47]">ADC4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[48]">ADC5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[6f]">BoardCom_Task</a> from task_ctrl.o(.text.BoardCom_Task) referenced from app_freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_BoardCom)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32g4xx_it.o(.text.BusFault_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4a]">COMP1_2_3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4b]">COMP4_5_6_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4c]">COMP7_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[65]">CORDIC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4d]">CRS_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[70]">Cap_Task</a> from task_ctrl.o(.text.Cap_Task) referenced from app_freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_Cap)
 <LI><a href="#[71]">Chassis_Task</a> from task_ctrl.o(.text.Chassis_Task) referenced from app_freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_Chassis)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from stm32g4xx_it.o(.text.DMA1_Channel3_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[61]">DMA1_Channel8_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[46]">DMA2_Channel5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[62]">DMA2_Channel6_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[63]">DMA2_Channel7_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[64]">DMA2_Channel8_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5f]">DMAMUX_OVR_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32g4xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1f]">FDCAN1_IT0_IRQHandler</a> from stm32g4xx_it.o(.text.FDCAN1_IT0_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[20]">FDCAN1_IT1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[57]">FDCAN2_IT0_IRQHandler</a> from stm32g4xx_it.o(.text.FDCAN2_IT0_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[58]">FDCAN2_IT1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[59]">FDCAN3_IT0_IRQHandler</a> from stm32g4xx_it.o(.text.FDCAN3_IT0_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5a]">FDCAN3_IT1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[66]">FMAC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[53]">FPU_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[98]">GM6020_Decode</a> from protocol_motor.o(.text.GM6020_Decode) referenced from protocol_motor.o(.data.Chassis_MotorDecodeTable)
 <LI><a href="#[72]">Gimbal_Task</a> from task_ctrl.o(.text.Gimbal_Task) referenced from app_freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_Gimbal)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32g4xx_it.o(.text.HardFault_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5e]">I2C3_ER_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5d]">I2C3_EV_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[55]">I2C4_ER_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[54]">I2C4_EV_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[73]">Init_Task</a> from task_ctrl.o(.text.Init_Task) referenced from app_freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_Init)
 <LI><a href="#[3b]">LPTIM1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5c]">LPUART1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[97]">M3508_Decode</a> from protocol_motor.o(.text.M3508_Decode) referenced 4 times from protocol_motor.o(.data.Chassis_MotorDecodeTable)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32g4xx_it.o(.text.MemManage_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32g4xx_it.o(.text.NMI_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[b]">PVD_PVM_IRQHandler</a> from stm32g4xx_it.o(.text.PVD_PVM_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[80]">P_ext_air_support_data</a> from protocol_referee.o(.text.P_ext_air_support_data) referenced from protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
 <LI><a href="#[7f]">P_ext_buff</a> from protocol_referee.o(.text.P_ext_buff) referenced from protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
 <LI><a href="#[85]">P_ext_dart_client_cmd</a> from protocol_referee.o(.text.P_ext_dart_client_cmd) referenced from protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
 <LI><a href="#[7b]">P_ext_dart_info</a> from protocol_referee.o(.text.P_ext_dart_info) referenced from protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
 <LI><a href="#[78]">P_ext_event_data</a> from protocol_referee.o(.text.P_ext_event_data) referenced from protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
 <LI><a href="#[76]">P_ext_game_result</a> from protocol_referee.o(.text.P_ext_game_result) referenced from protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
 <LI><a href="#[77]">P_ext_game_robot_HP</a> from protocol_referee.o(.text.P_ext_game_robot_HP) referenced from protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
 <LI><a href="#[75]">P_ext_game_status</a> from protocol_referee.o(.text.P_ext_game_status) referenced from protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
 <LI><a href="#[81]">P_ext_hurt_data</a> from protocol_referee.o(.text.P_ext_hurt_data) referenced from protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
 <LI><a href="#[7d]">P_ext_power_heat_data</a> from protocol_referee.o(.text.P_ext_power_heat_data) referenced from protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
 <LI><a href="#[83]">P_ext_projectile_allowance</a> from protocol_referee.o(.text.P_ext_projectile_allowance) referenced from protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
 <LI><a href="#[7a]">P_ext_referee_warning</a> from protocol_referee.o(.text.P_ext_referee_warning) referenced from protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
 <LI><a href="#[84]">P_ext_rfid_status</a> from protocol_referee.o(.text.P_ext_rfid_status) referenced from protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
 <LI><a href="#[7e]">P_ext_robot_pos</a> from protocol_referee.o(.text.P_ext_robot_pos) referenced from protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
 <LI><a href="#[7c]">P_ext_robot_status</a> from protocol_referee.o(.text.P_ext_robot_status) referenced from protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
 <LI><a href="#[82]">P_ext_shoot_data</a> from protocol_referee.o(.text.P_ext_shoot_data) referenced from protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
 <LI><a href="#[79]">P_ext_supply_projectile_action</a> from protocol_referee.o(.text.P_ext_supply_projectile_action) referenced from protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.text.PendSV_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[60]">QUADSPI_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5b]">RNG_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[c]">RTC_TAMP_LSECSS_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4e]">SAI1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[56]">SPI4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.text.SVC_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from port.o(.text.SysTick_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[67]">SystemInit</a> from system_stm32g4xx.o(.text.SystemInit) referenced from startup_stm32g473xx.o(.text)
 <LI><a href="#[22]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4f]">TIM20_BRK_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[52]">TIM20_CC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[51]">TIM20_TRG_COM_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[50]">TIM20_UP_IRQHandler</a> from stm32g4xx_it.o(.text.TIM20_UP_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[41]">TIM7_DAC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[69]">UART_DMAAbortOnError</a> from stm32g4xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced 2 times from stm32g4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[6c]">UART_DMAError</a> from stm32g4xx_hal_uart.o(.text.UART_DMAError) referenced 2 times from stm32g4xx_hal_uart.o(.text.UART_Start_Receive_DMA)
 <LI><a href="#[6a]">UART_DMAReceiveCplt</a> from stm32g4xx_hal_uart.o(.text.UART_DMAReceiveCplt) referenced 2 times from stm32g4xx_hal_uart.o(.text.UART_Start_Receive_DMA)
 <LI><a href="#[6b]">UART_DMARxHalfCplt</a> from stm32g4xx_hal_uart.o(.text.UART_DMARxHalfCplt) referenced 2 times from stm32g4xx_hal_uart.o(.text.UART_Start_Receive_DMA)
 <LI><a href="#[49]">UCPD1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[74]">UI_Task</a> from task_ctrl.o(.text.UI_Task) referenced from app_freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_UI)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from stm32g4xx_it.o(.text.USART2_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1d]">USB_HP_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1e]">USB_LP_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32g4xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[8b]">_GLOBAL__sub_I_app_ui.cpp</a> from app_ui.o(.text._GLOBAL__sub_I_app_ui.cpp) referenced from app_ui.o(.init_array)
 <LI><a href="#[86]">UI::Int::drawTo(UI::UiStruct*)</a> from app_ui.o(.text._ZN2UI3Int6drawToEPNS_8UiStructE) referenced from app_ui.o(.rodata._ZTVN2UI3IntE)
 <LI><a href="#[87]">UI::Line::drawTo(UI::UiStruct*)</a> from app_ui.o(.text._ZN2UI4Line6drawToEPNS_8UiStructE) referenced from app_ui.o(.rodata._ZTVN2UI4LineE)
 <LI><a href="#[88]">UI::Float::drawTo(UI::UiStruct*)</a> from app_ui.o(.text._ZN2UI5Float6drawToEPNS_8UiStructE) referenced from app_ui.o(.rodata._ZTVN2UI5FloatE)
 <LI><a href="#[89]">UI::Shape::drawTo(UI::UiStruct*)</a> from app_ui.o(.text._ZN2UI5Shape6drawToEPNS_8UiStructE) referenced from app_ui.o(.rodata._ZTVN2UI5ShapeE)
 <LI><a href="#[89]">UI::Shape::drawTo(UI::UiStruct*)</a> from app_ui.o(.text._ZN2UI5Shape6drawToEPNS_8UiStructE) referenced from app_ui.o(.rodata._ZTVN2UI6StringE)
 <LI><a href="#[8a]">UI::Rectangle::drawTo(UI::UiStruct*)</a> from app_ui.o(.text._ZN2UI9Rectangle6drawToEPNS_8UiStructE) referenced from app_ui.o(.rodata._ZTVN2UI9RectangleE)
 <LI><a href="#[68]">__main</a> from __main.o(!!!main) referenced from startup_stm32g473xx.o(.text)
 <LI><a href="#[96]">_send_cap_mode</a> from protocol_board.o(.text._send_cap_mode) referenced from protocol_board.o(.data.Cha_Send)
 <LI><a href="#[94]">_send_referee_data_1</a> from protocol_board.o(.text._send_referee_data_1) referenced from protocol_board.o(.data.Cha_Send)
 <LI><a href="#[95]">_send_referee_data_2</a> from protocol_board.o(.text._send_referee_data_2) referenced from protocol_board.o(.data.Cha_Send)
 <LI><a href="#[8c]">_set_cap_data_1</a> from protocol_board.o(.text._set_cap_data_1) referenced from protocol_board.o(.data.Cap_Receive)
 <LI><a href="#[8d]">_set_cap_data_2</a> from protocol_board.o(.text._set_cap_data_2) referenced from protocol_board.o(.data.Cap_Receive)
 <LI><a href="#[92]">_set_cha_ref</a> from protocol_board.o(.text._set_cha_ref) referenced from protocol_board.o(.data.Cha_Receive)
 <LI><a href="#[90]">_set_control</a> from protocol_board.o(.text._set_control) referenced from protocol_board.o(.data.Cha_Receive)
 <LI><a href="#[91]">_set_imu_yaw</a> from protocol_board.o(.text._set_imu_yaw) referenced from protocol_board.o(.data.Cha_Receive)
 <LI><a href="#[8e]">_set_referee_data_1</a> from protocol_board.o(.text._set_referee_data_1) referenced from protocol_board.o(.data.Cha_Receive)
 <LI><a href="#[8f]">_set_referee_data_2</a> from protocol_board.o(.text._set_referee_data_2) referenced from protocol_board.o(.data.Cha_Receive)
 <LI><a href="#[93]">_set_ui_state</a> from protocol_board.o(.text._set_ui_state) referenced from protocol_board.o(.data.Cha_Receive)
 <LI><a href="#[6e]">prvIdleTask</a> from tasks.o(.text.prvIdleTask) referenced 2 times from tasks.o(.text.vTaskStartScheduler)
 <LI><a href="#[6d]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced 2 times from port.o(.text.pxPortInitialiseStack)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[68]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[9d]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[226]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[227]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[9e]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[228]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[a5]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[9f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[229]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[22a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[22b]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[22c]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[22d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[22e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[22f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[230]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[231]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[232]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[233]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[234]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[235]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[236]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[237]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[238]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[239]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[23a]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[23b]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[23c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[23d]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[aa]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[23e]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[23f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[240]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[241]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[242]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[243]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[244]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[9c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[245]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[a2]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a4]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[246]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[a6]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[247]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[b9]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[a9]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[248]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[ab]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ADC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ADC5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>COMP1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>COMP4_5_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>COMP7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>CORDIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA1_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMAMUX_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FDCAN3_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>FMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RTC_TAMP_LSECSS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM20_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM20_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM20_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UCPD1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32g473xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[198]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[249]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetHandle
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_DecodeCap
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_DecodeBoard
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::String::getInitBuffer(unsigned char*, unsigned short, unsigned short, char const*, unsigned short)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::String::getUpdateBuffer(unsigned char*, unsigned short, unsigned short, char const*, unsigned short)
</UL>

<P><STRONG><a name="[ad]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[24a]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::Read(float*, unsigned short)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::Write(float const*, unsigned short)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[24b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[24e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::String::getInitBuffer(unsigned char*, unsigned short, unsigned short, char const*, unsigned short)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Layer::getInitBuffer(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::String::getUpdateBuffer(unsigned char*, unsigned short, unsigned short, char const*, unsigned short)
</UL>

<P><STRONG><a name="[24f]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_Reset
</UL>

<P><STRONG><a name="[250]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[252]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[b2]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[b4]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[255]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>

<P><STRONG><a name="[ac]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[257]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[258]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[a8]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b6]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[259]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[ba]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[bc]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[bd]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[be]"></a>BoardCom_ChassisModeSet</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, protocol_board.o(.text.BoardCom_ChassisModeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BoardCom_ChassisModeSet &rArr; Chassis_SetMoveRef
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_SetSpeedFdb
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_SetAngleFdb
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_SetRef
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_ModeSet
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_SetMoveRef
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_ModeSet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_GetControlPtr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_GetDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_control
</UL>

<P><STRONG><a name="[c7]"></a>BoardCom_Decode</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, protocol_board.o(.text.BoardCom_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BoardCom_Decode &rArr; BoardCom_DecodeCap
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_DecodeCap
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_DecodeBoard
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[c8]"></a>BoardCom_DecodeBoard</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, protocol_board.o(.text.BoardCom_DecodeBoard))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BoardCom_DecodeBoard
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_GetDataPtr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_Decode
</UL>

<P><STRONG><a name="[c9]"></a>BoardCom_DecodeCap</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, protocol_board.o(.text.BoardCom_DecodeCap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BoardCom_DecodeCap
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_Decode
</UL>

<P><STRONG><a name="[bf]"></a>BoardCom_GetDataPtr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, protocol_board.o(.text.BoardCom_GetDataPtr))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_DecodeBoard
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_Update
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_Reset
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_ChassisModeSet
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_cap_data_2
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_cap_data_1
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_ui_state
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_cha_ref
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_imu_yaw
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_control
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_referee_data_2
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_referee_data_1
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_cap_mode
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_referee_data_2
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_referee_data_1
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstrainedGyroVelocity(float*, float, float, float)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_CalcWheelRef()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_CalcOmmiFollowRef()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Update
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeHurt_Detect
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Task
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Update
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_Send
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OmmiChassis_Output
</UL>

<P><STRONG><a name="[cc]"></a>BoardCom_Init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, protocol_board.o(.text.BoardCom_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BoardCom_Init &rArr; FDCAN_InitTxHander
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_InitTxHander
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_All
</UL>

<P><STRONG><a name="[cd]"></a>BoardCom_Reset</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, protocol_board.o(.text.BoardCom_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BoardCom_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_GetDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_Init
</UL>

<P><STRONG><a name="[cf]"></a>BoardCom_Send</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, protocol_board.o(.text.BoardCom_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BoardCom_Send &rArr; BoardCom_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Start
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Stop
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_Update
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_GetDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_Task
</UL>

<P><STRONG><a name="[6f]"></a>BoardCom_Task</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, task_ctrl.o(.text.BoardCom_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = BoardCom_Task &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_BoardCom)
</UL>
<P><STRONG><a name="[d0]"></a>BoardCom_Update</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, protocol_board.o(.text.BoardCom_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BoardCom_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_GetDataPtr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_GetControlPtr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_GetDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_Send
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>CRC_GetCRC16CheckSum</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lib_crc.o(.text.CRC_GetCRC16CheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC_GetCRC16CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_VerifyCRC16CheckSum
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Layer::getDelBuffer(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Layer::getUpdateBuffer(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::String::getInitBuffer(unsigned char*, unsigned short, unsigned short, char const*, unsigned short)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Layer::getInitBuffer(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::String::getUpdateBuffer(unsigned char*, unsigned short, unsigned short, char const*, unsigned short)
</UL>

<P><STRONG><a name="[d9]"></a>CRC_GetCRC8CheckSum</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, lib_crc.o(.text.CRC_GetCRC8CheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CRC_GetCRC8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_VerifyCRC8CheckSum
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Layer::getDelBuffer(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Layer::getUpdateBuffer(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::String::getInitBuffer(unsigned char*, unsigned short, unsigned short, char const*, unsigned short)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Layer::getInitBuffer(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::String::getUpdateBuffer(unsigned char*, unsigned short, unsigned short, char const*, unsigned short)
</UL>

<P><STRONG><a name="[d6]"></a>CRC_VerifyCRC16CheckSum</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, lib_crc.o(.text.CRC_VerifyCRC16CheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CRC_VerifyCRC16CheckSum &rArr; CRC_GetCRC16CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetCRC16CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_Decode
</UL>

<P><STRONG><a name="[d8]"></a>CRC_VerifyCRC8CheckSum</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lib_crc.o(.text.CRC_VerifyCRC8CheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CRC_VerifyCRC8CheckSum &rArr; CRC_GetCRC8CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetCRC8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_Decode
</UL>

<P><STRONG><a name="[db]"></a>Cap_GetDataPtr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, periph_cap.o(.text.Cap_GetDataPtr))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ext_power_heat_data
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Update
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Update
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OmmiChassis_Output
</UL>

<P><STRONG><a name="[da]"></a>Cap_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, periph_cap.o(.text.Cap_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cap_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_GetDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_All
</UL>

<P><STRONG><a name="[70]"></a>Cap_Task</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, task_ctrl.o(.text.Cap_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Cap_Task &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_Cap)
</UL>
<P><STRONG><a name="[dc]"></a>Cap_Update</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, periph_cap.o(.text.Cap_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Cap_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_GetDataPtr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_GetDataPtr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_GetControlPtr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_GetDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Task
</UL>

<P><STRONG><a name="[c0]"></a>Chassis_GetControlPtr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_chassis.o(.text.Chassis_GetControlPtr))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_ChassisModeSet
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_SetMoveRef
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_ModeSet
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_CalcWheelRef()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_CalcOmmiFollowRef()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_CalcMoveRef()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_ParamInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Update
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Update
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OmmiChassis_Output
</UL>

<P><STRONG><a name="[dd]"></a>Chassis_Init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, app_chassis.o(.text.Chassis_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Chassis_Init &rArr; Chassis_ParamInit &rArr; PID_Init &rArr; Filter_Lowpass_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_GetControlPtr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_ParamInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_All
</UL>

<P><STRONG><a name="[c5]"></a>Chassis_ModeSet</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_chassis.o(.text.Chassis_ModeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chassis_ModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_GetControlPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_ChassisModeSet
</UL>

<P><STRONG><a name="[de]"></a>Chassis_ParamInit</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, config_ctrl.o(.text.Chassis_ParamInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Chassis_ParamInit &rArr; PID_Init &rArr; Filter_Lowpass_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_GetControlPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Init
</UL>

<P><STRONG><a name="[c6]"></a>Chassis_SetMoveRef</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, app_chassis.o(.text.Chassis_SetMoveRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Chassis_SetMoveRef
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_GetControlPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_ChassisModeSet
</UL>

<P><STRONG><a name="[71]"></a>Chassis_Task</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, task_ctrl.o(.text.Chassis_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = Chassis_Task &rArr; OmmiChassis_Output &rArr; PowerControl &rArr; PredictPower &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OmmiChassis_Output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_Chassis)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g4xx_it.o(.text.DMA1_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Channel3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>DWT_GetDataPtr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys_dwt.o(.text.DWT_GetDataPtr))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Init
</UL>

<P><STRONG><a name="[e2]"></a>DWT_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, sys_dwt.o(.text.DWT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DWT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_GetDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_All
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[10d]"></a>Error_Handler</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, main.o(.text.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM15_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN3_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN2_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1f]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g4xx_it.o(.text.FDCAN1_IT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FDCAN1_IT0_IRQHandler &rArr; HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; BoardCom_Decode &rArr; BoardCom_DecodeCap
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g4xx_it.o(.text.FDCAN2_IT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FDCAN2_IT0_IRQHandler &rArr; HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; BoardCom_Decode &rArr; BoardCom_DecodeCap
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>FDCAN3_IT0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g4xx_it.o(.text.FDCAN3_IT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FDCAN3_IT0_IRQHandler &rArr; HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; BoardCom_Decode &rArr; BoardCom_DecodeCap
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[e7]"></a>FDCAN_ErrorHandler</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, util_fdcan.o(.text.FDCAN_ErrorHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FDCAN_ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_Send
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_IntFilterAndStart
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[ce]"></a>FDCAN_InitTxHander</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, util_fdcan.o(.text.FDCAN_InitTxHander))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FDCAN_InitTxHander
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_InitGroup
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_Init
</UL>

<P><STRONG><a name="[e5]"></a>FDCAN_IntFilterAndStart</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, util_fdcan.o(.text.FDCAN_IntFilterAndStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FDCAN_IntFilterAndStart &rArr; HAL_FDCAN_ConfigFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ActivateNotification
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Start
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigGlobalFilter
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigFilter
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_All
</UL>

<P><STRONG><a name="[ea]"></a>FDCAN_Send</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, util_fdcan.o(.text.FDCAN_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FDCAN_Send &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_AddMessageToTxFifoQ
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Start
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Stop
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_cap_mode
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_referee_data_2
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_referee_data_1
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_CAN_SendGroupOutput
</UL>

<P><STRONG><a name="[ec]"></a>Filter_Lowpass</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, lib_filter.o(.text.Filter_Lowpass))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Filter_Lowpass
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Calc
</UL>

<P><STRONG><a name="[179]"></a>Filter_Lowpass_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_filter.o(.text.Filter_Lowpass_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Filter_Lowpass_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Init
</UL>

<P><STRONG><a name="[d4]"></a>GimbalYaw_GetControlPtr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_gimbal.o(.text.GimbalYaw_GetControlPtr))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_Update
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_SetSpeedFdb
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_SetAngleFdb
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_SetRef
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_ModeSet
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_CalcOmmiFollowRef()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_ParamInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Update
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_Output
</UL>

<P><STRONG><a name="[ed]"></a>GimbalYaw_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_gimbal.o(.text.GimbalYaw_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GimbalYaw_Init &rArr; GimbalYaw_ParamInit &rArr; PID_Init &rArr; Filter_Lowpass_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_GetControlPtr
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_ParamInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_All
</UL>

<P><STRONG><a name="[c4]"></a>GimbalYaw_ModeSet</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_gimbal.o(.text.GimbalYaw_ModeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GimbalYaw_ModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_GetControlPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_ChassisModeSet
</UL>

<P><STRONG><a name="[ef]"></a>GimbalYaw_Output</STRONG> (Thumb, 634 bytes, Stack size 48 bytes, app_gimbal.o(.text.GimbalYaw_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GimbalYaw_Output &rArr; PID_Calc &rArr; Filter_Lowpass
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Clear
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetRef
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Consequent_To_180
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_CAN_SendGroupOutput
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetOutput
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Calc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetFdb
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_GetControlPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Task
</UL>

<P><STRONG><a name="[ee]"></a>GimbalYaw_ParamInit</STRONG> (Thumb, 628 bytes, Stack size 80 bytes, config_ctrl.o(.text.GimbalYaw_ParamInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GimbalYaw_ParamInit &rArr; PID_Init &rArr; Filter_Lowpass_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_GetControlPtr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_Init
</UL>

<P><STRONG><a name="[c2]"></a>GimbalYaw_SetAngleFdb</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_gimbal.o(.text.GimbalYaw_SetAngleFdb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GimbalYaw_SetAngleFdb
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_GetControlPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_ChassisModeSet
</UL>

<P><STRONG><a name="[c1]"></a>GimbalYaw_SetRef</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_gimbal.o(.text.GimbalYaw_SetRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GimbalYaw_SetRef
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_GetControlPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_ChassisModeSet
</UL>

<P><STRONG><a name="[c3]"></a>GimbalYaw_SetSpeedFdb</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_gimbal.o(.text.GimbalYaw_SetSpeedFdb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GimbalYaw_SetSpeedFdb
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_GetControlPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_ChassisModeSet
</UL>

<P><STRONG><a name="[72]"></a>Gimbal_Task</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, task_ctrl.o(.text.Gimbal_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Gimbal_Task &rArr; GimbalYaw_Output &rArr; PID_Calc &rArr; Filter_Lowpass
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_Output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_Gimbal)
</UL>
<P><STRONG><a name="[14f]"></a>HAL_DMA_Abort</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, stm32g4xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[14e]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, stm32g4xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, stm32g4xx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[f7]"></a>HAL_DMA_Init</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, stm32g4xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[fa]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, stm32g4xx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>

<P><STRONG><a name="[e9]"></a>HAL_FDCAN_ActivateNotification</STRONG> (Thumb, 522 bytes, Stack size 24 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_ActivateNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_FDCAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_IntFilterAndStart
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[eb]"></a>HAL_FDCAN_AddMessageToTxFifoQ</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_AddMessageToTxFifoQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_CopyMessageToRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_Send
</UL>

<P><STRONG><a name="[e6]"></a>HAL_FDCAN_ConfigFilter</STRONG> (Thumb, 182 bytes, Stack size 28 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_FDCAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_IntFilterAndStart
</UL>

<P><STRONG><a name="[e8]"></a>HAL_FDCAN_ConfigGlobalFilter</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_ConfigGlobalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_FDCAN_ConfigGlobalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_IntFilterAndStart
</UL>

<P><STRONG><a name="[107]"></a>HAL_FDCAN_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_FDCAN_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>HAL_FDCAN_ErrorStatusCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_ErrorStatusCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_ErrorStatusCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[111]"></a>HAL_FDCAN_GetRxMessage</STRONG> (Thumb, 440 bytes, Stack size 40 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FDCAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[fd]"></a>HAL_FDCAN_HighPriorityMessageCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_HighPriorityMessageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_FDCAN_HighPriorityMessageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[e4]"></a>HAL_FDCAN_IRQHandler</STRONG> (Thumb, 656 bytes, Stack size 40 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; BoardCom_Decode &rArr; BoardCom_DecodeCap
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ErrorCallback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ErrorStatusCallback
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TimeoutOccurredCallback
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TimestampWraparoundCallback
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxBufferCompleteCallback
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxFifoEmptyCallback
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo1Callback
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxEventFifoCallback
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxBufferAbortCallback
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_HighPriorityMessageCallback
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN3_IT0_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN2_IT0_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN1_IT0_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>HAL_FDCAN_Init</STRONG> (Thumb, 716 bytes, Stack size 24 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_CalcultateRamBlockAddresses
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN3_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN2_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init
</UL>

<P><STRONG><a name="[109]"></a>HAL_FDCAN_MspInit</STRONG> (Thumb, 590 bytes, Stack size 168 bytes, fdcan.o(.text.HAL_FDCAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = HAL_FDCAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
</UL>

<P><STRONG><a name="[100]"></a>HAL_FDCAN_RxFifo0Callback</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, callback_ctrl.o(.text.HAL_FDCAN_RxFifo0Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_FDCAN_RxFifo0Callback &rArr; BoardCom_Decode &rArr; BoardCom_DecodeCap
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ActivateNotification
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_GetRxMessage
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_ErrorHandler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_CAN_Decode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>HAL_FDCAN_RxFifo1Callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_RxFifo1Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_RxFifo1Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[d2]"></a>HAL_FDCAN_Start</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_Send
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_IntFilterAndStart
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_Send
</UL>

<P><STRONG><a name="[d1]"></a>HAL_FDCAN_Stop</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_FDCAN_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_Send
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_Send
</UL>

<P><STRONG><a name="[105]"></a>HAL_FDCAN_TimeoutOccurredCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_TimeoutOccurredCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_FDCAN_TimeoutOccurredCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>HAL_FDCAN_TimestampWraparoundCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_TimestampWraparoundCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_FDCAN_TimestampWraparoundCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[fe]"></a>HAL_FDCAN_TxBufferAbortCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_TxBufferAbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_TxBufferAbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>HAL_FDCAN_TxBufferCompleteCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_TxBufferCompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_TxBufferCompleteCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[ff]"></a>HAL_FDCAN_TxEventFifoCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_TxEventFifoCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_TxEventFifoCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>HAL_FDCAN_TxFifoEmptyCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_TxFifoEmptyCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_FDCAN_TxFifoEmptyCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>HAL_GPIO_Init</STRONG> (Thumb, 872 bytes, Stack size 44 bytes, stm32g4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
</UL>

<P><STRONG><a name="[ca]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCFG_EnableVREFBUF
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Lowpass
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_DecodeCap
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_DecodeBoard
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_Reset
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_cap_data_2
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_cap_data_1
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_ui_state
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_cha_ref
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_imu_yaw
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_control
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_referee_data_2
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_referee_data_1
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_cap_mode
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_referee_data_2
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_referee_data_1
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM6020_Decode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508_Decode
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Update
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_Send
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_Decode
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_Init
</UL>

<P><STRONG><a name="[144]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[113]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32g4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>HAL_InitTick</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, stm32g4xx_hal_timebase_tim.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[116]"></a>HAL_MspInit</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32g4xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableUCPDDeadBattery
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCFG_VREFBUF_HighImpedanceConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCFG_EnableVREFBUF
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCFG_VREFBUF_VoltageScalingConfig
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[110]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32g4xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NVIC_EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[10f]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, stm32g4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[114]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32g4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[191]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 436 bytes, Stack size 20 bytes, stm32g4xx_hal_pwr_ex.o(.text.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PWREx_ControlVoltageScaling
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[11e]"></a>HAL_PWREx_DisableUCPDDeadBattery</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text.HAL_PWREx_DisableUCPDDeadBattery))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[124]"></a>HAL_PWREx_PVD_PVM_IRQHandler</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, stm32g4xx_hal_pwr_ex.o(.text.HAL_PWREx_PVD_PVM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PWREx_PVD_PVM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVM4Callback
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVM3Callback
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVM2Callback
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVM1Callback
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_PVDCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_PVM_IRQHandler
</UL>

<P><STRONG><a name="[126]"></a>HAL_PWREx_PVM1Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text.HAL_PWREx_PVM1Callback))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVD_PVM_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>HAL_PWREx_PVM2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text.HAL_PWREx_PVM2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVD_PVM_IRQHandler
</UL>

<P><STRONG><a name="[128]"></a>HAL_PWREx_PVM3Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text.HAL_PWREx_PVM3Callback))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVD_PVM_IRQHandler
</UL>

<P><STRONG><a name="[129]"></a>HAL_PWREx_PVM4Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text.HAL_PWREx_PVM4Callback))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVD_PVM_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>HAL_PWR_PVDCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr.o(.text.HAL_PWR_PVDCallback))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVD_PVM_IRQHandler
</UL>

<P><STRONG><a name="[10c]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1316 bytes, Stack size 32 bytes, stm32g4xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
</UL>

<P><STRONG><a name="[12a]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 806 bytes, Stack size 32 bytes, stm32g4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSysClockFreqFromPLLSource
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[117]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32g4xx_hal_rcc.o(.text.HAL_RCC_GetClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[12e]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[12d]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32g4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[118]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32g4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[12c]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, stm32g4xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[12f]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1982 bytes, Stack size 48 bytes, stm32g4xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[11c]"></a>HAL_SYSCFG_EnableVREFBUF</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32g4xx_hal.o(.text.HAL_SYSCFG_EnableVREFBUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SYSCFG_EnableVREFBUF
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[11d]"></a>HAL_SYSCFG_VREFBUF_HighImpedanceConfig</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32g4xx_hal.o(.text.HAL_SYSCFG_VREFBUF_HighImpedanceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SYSCFG_VREFBUF_HighImpedanceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[11b]"></a>HAL_SYSCFG_VREFBUF_VoltageScalingConfig</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32g4xx_hal.o(.text.HAL_SYSCFG_VREFBUF_VoltageScalingConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SYSCFG_VREFBUF_VoltageScalingConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[13d]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text.HAL_TIMEx_Break2Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[13c]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[13f]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_CommutCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>HAL_TIMEx_DirectionChangeCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text.HAL_TIMEx_DirectionChangeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_DirectionChangeCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>HAL_TIMEx_EncoderIndexCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text.HAL_TIMEx_EncoderIndexCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_EncoderIndexCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[142]"></a>HAL_TIMEx_IndexErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text.HAL_TIMEx_IndexErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_IndexErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[16e]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 372 bytes, Stack size 20 bytes, stm32g4xx_hal_tim_ex.o(.text.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM15_Init
</UL>

<P><STRONG><a name="[143]"></a>HAL_TIMEx_TransitionErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim_ex.o(.text.HAL_TIMEx_TransitionErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_TransitionErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[119]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM15_Init
</UL>

<P><STRONG><a name="[130]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, tim.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[11a]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 262 bytes, Stack size 12 bytes, stm32g4xx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[132]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 494 bytes, Stack size 32 bytes, stm32g4xx_hal_tim.o(.text.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM15_Init
</UL>

<P><STRONG><a name="[138]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 932 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_TransitionErrorCallback
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_IndexErrorCallback
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_DirectionChangeCallback
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_EncoderIndexCallback
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM20_UP_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_OC_DelayElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[13e]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_TriggerCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[171]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, stm32g4xx_hal_uart_ex.o(.text.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_UARTEx_DisableFifoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[145]"></a>HAL_UARTEx_ReceiveToIdle_DMA</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, stm32g4xx_hal_uart_ex.o(.text.HAL_UARTEx_ReceiveToIdle_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_Init
</UL>

<P><STRONG><a name="[150]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[154]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_uart_ex.o(.text.HAL_UARTEx_RxFifoFullCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UARTEx_RxFifoFullCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32g4xx_hal_uart_ex.o(.text.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[149]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32g4xx_hal_uart_ex.o(.text.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[153]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_uart_ex.o(.text.HAL_UARTEx_TxFifoEmptyCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UARTEx_TxFifoEmptyCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[151]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_uart_ex.o(.text.HAL_UARTEx_WakeupCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UARTEx_WakeupCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[14a]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, callback_ctrl.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = HAL_UART_ErrorCallback &rArr; Referee_Init &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[14c]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 1348 bytes, Stack size 72 bytes, stm32g4xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_UART_ErrorCallback &rArr; Referee_Init &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxFifoFullCallback
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_TxFifoEmptyCallback
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[155]"></a>HAL_UART_Init</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[156]"></a>HAL_UART_MspInit</STRONG> (Thumb, 258 bytes, Stack size 136 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[193]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_uart.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[194]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_uart.o(.text.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[15a]"></a>HAL_UART_Transmit</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, stm32g4xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeModeStr(UI::String&, char const*, unsigned short)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Update
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Refresh
</UL>

<P><STRONG><a name="[195]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_uart.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[15d]"></a>HP_GetDataPtr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_ui.o(.text.HP_GetDataPtr))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeHurt_Detect
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[15c]"></a>HomeHurt_Detect</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, app_ui.o(.text.HomeHurt_Detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HomeHurt_Detect
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HP_GetDataPtr
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetDataPtr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_GetDataPtr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_GetDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Task
</UL>

<P><STRONG><a name="[15f]"></a>Init_All</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, config_ctrl.o(.text.Init_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = Init_All &rArr; UI_Init &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_IntFilterAndStart
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_AllMotors
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
</UL>

<P><STRONG><a name="[73]"></a>Init_Task</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, task_ctrl.o(.text.Init_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = Init_Task &rArr; Init_All &rArr; UI_Init &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetHandle
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcTaskGetName
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_All
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_Init)
</UL>
<P><STRONG><a name="[167]"></a>MX_DMA_Init</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, dma.o(.text.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[168]"></a>MX_FDCAN1_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fdcan.o(.text.MX_FDCAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = MX_FDCAN1_Init &rArr; HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[169]"></a>MX_FDCAN2_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fdcan.o(.text.MX_FDCAN2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = MX_FDCAN2_Init &rArr; HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16a]"></a>MX_FDCAN3_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fdcan.o(.text.MX_FDCAN3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = MX_FDCAN3_Init &rArr; HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16b]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 382 bytes, Stack size 192 bytes, app_freertos.o(.text.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e9]"></a>MX_GPIO_Init</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MX_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16d]"></a>MX_TIM15_Init</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, tim.o(.text.MX_TIM15_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MX_TIM15_Init &rArr; HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16f]"></a>MX_TIM3_Init</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, tim.o(.text.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[170]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, usart.o(.text.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>Math_Consequent_To_180</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lib_math.o(.text.Math_Consequent_To_180))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Math_Consequent_To_180 &rArr; Math_Normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_CalcOmmiFollowRef()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_Output
</UL>

<P><STRONG><a name="[178]"></a>Math_Differential</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lib_math.o(.text.Math_Differential))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Math_Differential
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Calc
</UL>

<P><STRONG><a name="[172]"></a>Math_Normalize</STRONG> (Thumb, 154 bytes, Stack size 28 bytes, lib_math.o(.text.Math_Normalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Math_Normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Consequent_To_180
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[112]"></a>Motor_CAN_Decode</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, protocol_motor.o(.text.Motor_CAN_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Motor_CAN_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[f6]"></a>Motor_CAN_SendGroupOutput</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, protocol_motor.o(.text.Motor_CAN_SendGroupOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Motor_CAN_SendGroupOutput &rArr; FDCAN_Send &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_Send
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_GetOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_Output
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OmmiChassis_Output
</UL>

<P><STRONG><a name="[173]"></a>Motor_GetOutput</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, periph_motor_can.o(.text.Motor_GetOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Motor_GetOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_CAN_SendGroupOutput
</UL>

<P><STRONG><a name="[163]"></a>Motor_Init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, periph_motor_can.o(.text.Motor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_AllMotors
</UL>

<P><STRONG><a name="[162]"></a>Motor_InitGroup</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, periph_motor_can.o(.text.Motor_InitGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Motor_InitGroup &rArr; FDCAN_InitTxHander
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_InitTxHander
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_AllMotors
</UL>

<P><STRONG><a name="[f5]"></a>Motor_SetOutput</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, periph_motor_can.o(.text.Motor_SetOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor_SetOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_Output
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OmmiChassis_Output
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>OmmiChassis_Output</STRONG> (Thumb, 884 bytes, Stack size 216 bytes, app_chassis.o(.text.OmmiChassis_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = OmmiChassis_Output &rArr; PowerControl &rArr; PredictPower &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_CAN_SendGroupOutput
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetOutput
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Calc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetFdb
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_GetDataPtr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_GetDataPtr
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_CalcWheelRef()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_CalcOmmiFollowRef()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_CalcMoveRef()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_GetControlPtr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_GetDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Task
</UL>

<P><STRONG><a name="[f4]"></a>PID_Calc</STRONG> (Thumb, 1074 bytes, Stack size 96 bytes, alg_pid.o(.text.PID_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PID_Calc &rArr; Filter_Lowpass
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Lowpass
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Differential
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_CalcOmmiFollowRef()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_Output
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OmmiChassis_Output
</UL>

<P><STRONG><a name="[f0]"></a>PID_Clear</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, alg_pid.o(.text.PID_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PID_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_Output
</UL>

<P><STRONG><a name="[1cb]"></a>PID_GetRef</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, alg_pid.o(.text.PID_GetRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PID_GetRef
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_CalcWheelRef()
</UL>

<P><STRONG><a name="[df]"></a>PID_Init</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, alg_pid.o(.text.PID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PID_Init &rArr; Filter_Lowpass_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Lowpass_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_ParamInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_ParamInit
</UL>

<P><STRONG><a name="[f3]"></a>PID_SetFdb</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, alg_pid.o(.text.PID_SetFdb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PID_SetFdb
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_CalcOmmiFollowRef()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_Output
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OmmiChassis_Output
</UL>

<P><STRONG><a name="[f1]"></a>PID_SetRef</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, alg_pid.o(.text.PID_SetRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PID_SetRef
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_CalcWheelRef()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_CalcOmmiFollowRef()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_Output
</UL>

<P><STRONG><a name="[b]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32g4xx_it.o(.text.PVD_PVM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PVD_PVM_IRQHandler &rArr; HAL_PWREx_PVD_PVM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVD_PVM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>P_ext_air_support_data</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, protocol_referee.o(.text.P_ext_air_support_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P_ext_air_support_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
</UL>
<P><STRONG><a name="[7f]"></a>P_ext_buff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, protocol_referee.o(.text.P_ext_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P_ext_buff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
</UL>
<P><STRONG><a name="[85]"></a>P_ext_dart_client_cmd</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, protocol_referee.o(.text.P_ext_dart_client_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P_ext_dart_client_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
</UL>
<P><STRONG><a name="[7b]"></a>P_ext_dart_info</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, protocol_referee.o(.text.P_ext_dart_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P_ext_dart_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
</UL>
<P><STRONG><a name="[78]"></a>P_ext_event_data</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, protocol_referee.o(.text.P_ext_event_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = P_ext_event_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
</UL>
<P><STRONG><a name="[76]"></a>P_ext_game_result</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, protocol_referee.o(.text.P_ext_game_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P_ext_game_result
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
</UL>
<P><STRONG><a name="[77]"></a>P_ext_game_robot_HP</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, protocol_referee.o(.text.P_ext_game_robot_HP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = P_ext_game_robot_HP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
</UL>
<P><STRONG><a name="[75]"></a>P_ext_game_status</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, protocol_referee.o(.text.P_ext_game_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = P_ext_game_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
</UL>
<P><STRONG><a name="[81]"></a>P_ext_hurt_data</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, protocol_referee.o(.text.P_ext_hurt_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P_ext_hurt_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
</UL>
<P><STRONG><a name="[7d]"></a>P_ext_power_heat_data</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, protocol_referee.o(.text.P_ext_power_heat_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = P_ext_power_heat_data
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_GetDataPtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
</UL>
<P><STRONG><a name="[83]"></a>P_ext_projectile_allowance</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, protocol_referee.o(.text.P_ext_projectile_allowance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P_ext_projectile_allowance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
</UL>
<P><STRONG><a name="[7a]"></a>P_ext_referee_warning</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, protocol_referee.o(.text.P_ext_referee_warning))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P_ext_referee_warning
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
</UL>
<P><STRONG><a name="[84]"></a>P_ext_rfid_status</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, protocol_referee.o(.text.P_ext_rfid_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P_ext_rfid_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
</UL>
<P><STRONG><a name="[7e]"></a>P_ext_robot_pos</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, protocol_referee.o(.text.P_ext_robot_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = P_ext_robot_pos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
</UL>
<P><STRONG><a name="[7c]"></a>P_ext_robot_status</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, protocol_referee.o(.text.P_ext_robot_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = P_ext_robot_status &rArr; Referee_GetClientIDByRobotID
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_GetClientIDByRobotID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
</UL>
<P><STRONG><a name="[82]"></a>P_ext_shoot_data</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, protocol_referee.o(.text.P_ext_shoot_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = P_ext_shoot_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
</UL>
<P><STRONG><a name="[79]"></a>P_ext_supply_projectile_action</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, protocol_referee.o(.text.P_ext_supply_projectile_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P_ext_supply_projectile_action
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_referee.o(.rodata.Const_Referee_CMD_LIST)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, port.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[177]"></a>PowerControl</STRONG> (Thumb, 1024 bytes, Stack size 232 bytes, lib_power_ctrl.o(.text.PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = PowerControl &rArr; PredictPower &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sheriff::SlidingWindow&lang;float, 16u&rang;::operator&lang;&lang;(float const&)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sheriff::SlidingWindow&lang;float, 16u&rang;::operator[](unsigned int)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sheriff::SlidingWindow&lang;float, 16u&rang;::SlidingWindow__sub_object()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControlGetCurrentP
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictPower
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OmmiChassis_Output
</UL>

<P><STRONG><a name="[181]"></a>PowerControlGetCurrentP</STRONG> (Thumb, 280 bytes, Stack size 96 bytes, lib_power_ctrl.o(.text.PowerControlGetCurrentP))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PowerControlGetCurrentP &rArr; sqrt[abi:v16000](float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt[abi:v16000](float)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs[abi:v16000](float)
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[180]"></a>PredictPower</STRONG> (Thumb, 736 bytes, Stack size 144 bytes, lib_power_ctrl.o(.text.PredictPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = PredictPower &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs[abi:v16000](float)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[189]"></a>Referee_Decode</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, protocol_referee.o(.text.Referee_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Referee_Decode &rArr; Referee_ParseRefereeCmd &rArr; Referee_ParseRobotCustomData
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_ParseRefereeCmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_VerifyCRC16CheckSum
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_VerifyCRC8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveHandler
</UL>

<P><STRONG><a name="[17a]"></a>Referee_GetClientIDByRobotID</STRONG> (Thumb, 104 bytes, Stack size 4 bytes, protocol_referee.o(.text.Referee_GetClientIDByRobotID))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Referee_GetClientIDByRobotID
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ext_robot_status
</UL>

<P><STRONG><a name="[d5]"></a>Referee_GetDataPtr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, protocol_referee.o(.text.Referee_GetDataPtr))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_Update
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_CalcWheelRef()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeHurt_Detect
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Update
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OmmiChassis_Output
</UL>

<P><STRONG><a name="[14b]"></a>Referee_Init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, protocol_referee.o(.text.Referee_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Referee_Init &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveDMA
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InitDMA
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_All
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>

<P><STRONG><a name="[18a]"></a>Referee_ParseRefereeCmd</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, protocol_referee.o(.text.Referee_ParseRefereeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Referee_ParseRefereeCmd &rArr; Referee_ParseRobotCustomData
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_ParseRobotCustomData
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_Decode
</UL>

<P><STRONG><a name="[18e]"></a>Referee_ParseRobotCustomData</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, protocol_referee.o(.text.Referee_ParseRobotCustomData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Referee_ParseRobotCustomData
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_ParseRefereeCmd
</UL>

<P><STRONG><a name="[18b]"></a>Referee_Reset</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, protocol_referee.o(.text.Referee_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Referee_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_Init
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, port.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[190]"></a>SystemClock_Config</STRONG> (Thumb, 116 bytes, Stack size 88 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32g4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>TIM20_UP_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g4xx_it.o(.text.TIM20_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM20_UP_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[131]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 464 bytes, Stack size 12 bytes, stm32g4xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[133]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32g4xx_hal_tim.o(.text.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[158]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 328 bytes, Stack size 4 bytes, stm32g4xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[159]"></a>UART_CheckIdleState</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32g4xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[197]"></a>UART_DMACurrentDataCounter</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, util_uart.o(.text.UART_DMACurrentDataCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_DMACurrentDataCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveHandler
</UL>

<P><STRONG><a name="[18c]"></a>UART_InitDMA</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, util_uart.o(.text.UART_InitDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_InitDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_Init
</UL>

<P><STRONG><a name="[18d]"></a>UART_ReceiveDMA</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, util_uart.o(.text.UART_ReceiveDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART_ReceiveDMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_Init
</UL>

<P><STRONG><a name="[196]"></a>UART_ReceiveHandler</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, callback_ctrl.o(.text.UART_ReceiveHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UART_ReceiveHandler &rArr; Referee_Decode &rArr; Referee_ParseRefereeCmd &rArr; Referee_ParseRobotCustomData
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_Decode
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMACurrentDataCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[157]"></a>UART_SetConfig</STRONG> (Thumb, 1506 bytes, Stack size 80 bytes, stm32g4xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[146]"></a>UART_Start_Receive_DMA</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, stm32g4xx_hal_uart.o(.text.UART_Start_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveDMA
</UL>

<P><STRONG><a name="[15b]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 376 bytes, Stack size 48 bytes, stm32g4xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[15e]"></a>UI_GetDataPtr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_ui.o(.text.UI_GetDataPtr))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeModeStr(UI::String&, char const*, unsigned short)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Update
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeHurt_Detect
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Refresh
</UL>

<P><STRONG><a name="[161]"></a>UI_Init</STRONG> (Thumb, 884 bytes, Stack size 88 bytes, app_ui.o(.text.UI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = UI_Init &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Layer::getUpdateBuffer(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::String::getInitBuffer(unsigned char*, unsigned short, unsigned short, char const*, unsigned short)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Layer::getInitBuffer(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::String::getUpdateBuffer(unsigned char*, unsigned short, unsigned short, char const*, unsigned short)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Refresh
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_All
</UL>

<P><STRONG><a name="[19d]"></a>UI_Refresh</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, app_ui.o(.text.UI_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = UI_Refresh &rArr; UI_Init &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Layer::getDelBuffer(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetDataPtr
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Task
</UL>

<P><STRONG><a name="[74]"></a>UI_Task</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, task_ctrl.o(.text.UI_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = UI_Task &rArr; UI_Refresh &rArr; UI_Init &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Update
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeHurt_Detect
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Refresh
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_GetDataPtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_UI)
</UL>
<P><STRONG><a name="[19f]"></a>UI_Update</STRONG> (Thumb, 912 bytes, Stack size 56 bytes, app_ui.o(.text.UI_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = UI_Update &rArr; ChangeModeStr(UI::String&, char const*, unsigned short) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Float::changeValue(float)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Int::changeValue(int)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Rectangle::changeSecondPoint(UI::Shape::XY)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Shape::changeColor(UI::Color)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Layer::getUpdateBuffer(unsigned char*, unsigned short, unsigned short)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeModeStr(UI::String&, char const*, unsigned short)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetDataPtr
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_GetDataPtr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_GetControlPtr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_GetControlPtr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_GetDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Task
</UL>

<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32g4xx_it.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_ErrorCallback &rArr; Referee_Init &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1a1]"></a>ChangeModeStr(UI::String&, char const*, unsigned short)</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, app_ui.o(.text._Z13ChangeModeStrRN2UI6StringEPKct))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = ChangeModeStr(UI::String&, char const*, unsigned short) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::String::getUpdateBuffer(unsigned char*, unsigned short, unsigned short, char const*, unsigned short)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Update
</UL>

<P><STRONG><a name="[1c4]"></a>ConstrainedGyroVelocity(float*, float, float, float)</STRONG> (Thumb, 456 bytes, Stack size 56 bytes, app_chassis.o(.text._Z23ConstrainedGyroVelocityPffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ConstrainedGyroVelocity(float*, float, float, float) &rArr; fabs[abi:v16000](float)
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs[abi:v16000](float)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_GetDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_CalcWheelRef()
</UL>

<P><STRONG><a name="[1c5]"></a>ConstrainedTranslationVelocity(float*, float, float, float, float)</STRONG> (Thumb, 468 bytes, Stack size 56 bytes, app_chassis.o(.text._Z30ConstrainedTranslationVelocityPfffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ConstrainedTranslationVelocity(float*, float, float, float, float) &rArr; fabs[abi:v16000](float)
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs[abi:v16000](float)
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_CalcWheelRef()
</UL>

<P><STRONG><a name="[1ce]"></a>abs[abi:v16000](float)</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, app_chassis.o(.text._Z3absB6v16000f))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = abs[abi:v16000](float)
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_CalcOmmiFollowRef()
</UL>

<P><STRONG><a name="[1c6]"></a>cos[abi:v16000](float)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_chassis.o(.text._Z3cosB6v16000f))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cos[abi:v16000](float) &rArr; __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_CalcMoveRef()
</UL>

<P><STRONG><a name="[1c8]"></a>sin[abi:v16000](float)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_chassis.o(.text._Z3sinB6v16000f))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sin[abi:v16000](float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_CalcMoveRef()
</UL>

<P><STRONG><a name="[182]"></a>fabs[abi:v16000](float)</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, app_chassis.o(.text._Z4fabsB6v16000f))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fabs[abi:v16000](float)
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControlGetCurrentP
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictPower
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstrainedGyroVelocity(float*, float, float, float)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstrainedTranslationVelocity(float*, float, float, float, float)
</UL>

<P><STRONG><a name="[183]"></a>sqrt[abi:v16000](float)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lib_power_ctrl.o(.text._Z4sqrtB6v16000f))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sqrt[abi:v16000](float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControlGetCurrentP
</UL>

<P><STRONG><a name="[1a3]"></a>UI::Int::changeValue(int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_ui.o(.text._ZN2UI3Int11changeValueEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UI::Int::changeValue(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Update
</UL>

<P><STRONG><a name="[86]"></a>UI::Int::drawTo(UI::UiStruct*)</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, app_ui.o(.text._ZN2UI3Int6drawToEPNS_8UiStructE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UI::Int::drawTo(UI::UiStruct*) &rArr; UI::Shape::drawTo(UI::UiStruct*)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Shape::drawTo(UI::UiStruct*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ui.o(.rodata._ZTVN2UI3IntE)
</UL>
<P><STRONG><a name="[1cf]"></a>UI::Int::Int__sub_object(UI::Color, unsigned char, UI::Shape::XY, unsigned short, int)</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, app_ui.o(.text._ZN2UI3IntC2ENS_5ColorEhNS_5Shape2XYEti))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UI::Int::Int__sub_object(UI::Color, unsigned char, UI::Shape::XY, unsigned short, int) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
</UL>

<P><STRONG><a name="[87]"></a>UI::Line::drawTo(UI::UiStruct*)</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, app_ui.o(.text._ZN2UI4Line6drawToEPNS_8UiStructE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UI::Line::drawTo(UI::UiStruct*) &rArr; UI::Shape::drawTo(UI::UiStruct*)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Shape::drawTo(UI::UiStruct*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ui.o(.rodata._ZTVN2UI4LineE)
</UL>
<P><STRONG><a name="[1d1]"></a>UI::Line::Line__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY)</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, app_ui.o(.text._ZN2UI4LineC2ENS_5ColorEhNS_5Shape2XYES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UI::Line::Line__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.21
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.20
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.19
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.18
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.17
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.16
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.15
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.14
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.13
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.12
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.11
</UL>

<P><STRONG><a name="[1a4]"></a>UI::Float::changeValue(float)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_ui.o(.text._ZN2UI5Float11changeValueEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UI::Float::changeValue(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Update
</UL>

<P><STRONG><a name="[88]"></a>UI::Float::drawTo(UI::UiStruct*)</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, app_ui.o(.text._ZN2UI5Float6drawToEPNS_8UiStructE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UI::Float::drawTo(UI::UiStruct*) &rArr; UI::Shape::drawTo(UI::UiStruct*)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Shape::drawTo(UI::UiStruct*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ui.o(.rodata._ZTVN2UI5FloatE)
</UL>
<P><STRONG><a name="[1d2]"></a>UI::Float::Float__sub_object(UI::Color, unsigned char, UI::Shape::XY, unsigned short, float)</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, app_ui.o(.text._ZN2UI5FloatC2ENS_5ColorEhNS_5Shape2XYEtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UI::Float::Float__sub_object(UI::Color, unsigned char, UI::Shape::XY, unsigned short, float) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.10
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.9
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.8
</UL>

<P><STRONG><a name="[19e]"></a>UI::Layer::getDelBuffer(unsigned char*, unsigned short, unsigned short)</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, app_ui.o(.text._ZN2UI5Layer12getDelBufferEPhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UI::Layer::getDelBuffer(unsigned char*, unsigned short, unsigned short) &rArr; CRC_GetCRC16CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetCRC16CheckSum
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetCRC8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Refresh
</UL>

<P><STRONG><a name="[199]"></a>UI::Layer::getInitBuffer(unsigned char*, unsigned short, unsigned short)</STRONG> (Thumb, 514 bytes, Stack size 48 bytes, app_ui.o(.text._ZN2UI5Layer13getInitBufferEPhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = UI::Layer::getInitBuffer(unsigned char*, unsigned short, unsigned short) &rArr; CRC_GetCRC16CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetCRC16CheckSum
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetCRC8CheckSum
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
</UL>

<P><STRONG><a name="[19b]"></a>UI::Layer::getUpdateBuffer(unsigned char*, unsigned short, unsigned short)</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, app_ui.o(.text._ZN2UI5Layer15getUpdateBufferEPhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UI::Layer::getUpdateBuffer(unsigned char*, unsigned short, unsigned short) &rArr; CRC_GetCRC16CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetCRC16CheckSum
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetCRC8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Update
</UL>

<P><STRONG><a name="[1d4]"></a>UI::Layer::Layer__sub_object(char const*, unsigned char, std::initializer_list&lang;UI::Shape*&rang;)</STRONG> (Thumb, 168 bytes, Stack size 64 bytes, app_ui.o(.text._ZN2UI5LayerC2EPKchSt16initializer_listIPNS_5ShapeEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UI::Layer::Layer__sub_object(char const*, unsigned char, std::initializer_list&lang;UI::Shape*&rang;) &rArr; std::initializer_list&lang;UI::Shape*&rang;::end[abi:v16000]() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::initializer_list&lang;UI::Shape*&rang;::end[abi:v16000]() const
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::initializer_list&lang;UI::Shape*&rang;::begin[abi:v16000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.28
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.25
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.23
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.22
</UL>

<P><STRONG><a name="[1a0]"></a>UI::Shape::changeColor(UI::Color)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_ui.o(.text._ZN2UI5Shape11changeColorENS_5ColorE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UI::Shape::changeColor(UI::Color)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Update
</UL>

<P><STRONG><a name="[89]"></a>UI::Shape::drawTo(UI::UiStruct*)</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, app_ui.o(.text._ZN2UI5Shape6drawToEPNS_8UiStructE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UI::Shape::drawTo(UI::UiStruct*)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Line::drawTo(UI::UiStruct*)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Float::drawTo(UI::UiStruct*)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Int::drawTo(UI::UiStruct*)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Rectangle::drawTo(UI::UiStruct*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> app_ui.o(.rodata._ZTVN2UI5ShapeE)
<LI> app_ui.o(.rodata._ZTVN2UI6StringE)
</UL>
<P><STRONG><a name="[1d0]"></a>UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, app_ui.o(.text._ZN2UI5ShapeC2ENS_5ColorEhNS0_2XYE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::String::String__sub_object(char const*, unsigned char, UI::Color, unsigned short, unsigned char, UI::Shape::XY)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Line::Line__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Float::Float__sub_object(UI::Color, unsigned char, UI::Shape::XY, unsigned short, float)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Int::Int__sub_object(UI::Color, unsigned char, UI::Shape::XY, unsigned short, int)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Rectangle::Rectangle__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY)
</UL>

<P><STRONG><a name="[19a]"></a>UI::String::getInitBuffer(unsigned char*, unsigned short, unsigned short, char const*, unsigned short)</STRONG> (Thumb, 620 bytes, Stack size 48 bytes, app_ui.o(.text._ZN2UI6String13getInitBufferEPhttPKct))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = UI::String::getInitBuffer(unsigned char*, unsigned short, unsigned short, char const*, unsigned short) &rArr; CRC_GetCRC16CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetCRC16CheckSum
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetCRC8CheckSum
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
</UL>

<P><STRONG><a name="[19c]"></a>UI::String::getUpdateBuffer(unsigned char*, unsigned short, unsigned short, char const*, unsigned short)</STRONG> (Thumb, 654 bytes, Stack size 48 bytes, app_ui.o(.text._ZN2UI6String15getUpdateBufferEPhttPKct))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = UI::String::getUpdateBuffer(unsigned char*, unsigned short, unsigned short, char const*, unsigned short) &rArr; CRC_GetCRC16CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetCRC16CheckSum
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetCRC8CheckSum
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeModeStr(UI::String&, char const*, unsigned short)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
</UL>

<P><STRONG><a name="[1d7]"></a>UI::String::String__sub_object(char const*, unsigned char, UI::Color, unsigned short, unsigned char, UI::Shape::XY)</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, app_ui.o(.text._ZN2UI6StringC2EPKchNS_5ColorEthNS_5Shape2XYE))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UI::String::String__sub_object(char const*, unsigned char, UI::Color, unsigned short, unsigned char, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.39
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.37
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.35
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.33
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.31
</UL>

<P><STRONG><a name="[1a2]"></a>UI::Rectangle::changeSecondPoint(UI::Shape::XY)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_ui.o(.text._ZN2UI9Rectangle17changeSecondPointENS_5Shape2XYE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UI::Rectangle::changeSecondPoint(UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Update
</UL>

<P><STRONG><a name="[8a]"></a>UI::Rectangle::drawTo(UI::UiStruct*)</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, app_ui.o(.text._ZN2UI9Rectangle6drawToEPNS_8UiStructE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UI::Rectangle::drawTo(UI::UiStruct*) &rArr; UI::Shape::drawTo(UI::UiStruct*)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Shape::drawTo(UI::UiStruct*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ui.o(.rodata._ZTVN2UI9RectangleE)
</UL>
<P><STRONG><a name="[1d8]"></a>UI::Rectangle::Rectangle__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY)</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, app_ui.o(.text._ZN2UI9RectangleC2ENS_5ColorEhNS_5Shape2XYES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UI::Rectangle::Rectangle__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[1d9]"></a>sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::Read(float*, unsigned short)</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, lib_power_ctrl.o(.text._ZN7sheriff10RingBufferIfLt16EE4ReadEPft))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::Read(float*, unsigned short) &rArr; unsigned short const& std::__2::min[abi:v16000]&lang;unsigned short&rang;(unsigned short const&, unsigned short const&) &rArr; unsigned short const& std::__2::min[abi:v16000]&lang;unsigned short, std::__2::__less&lang;unsigned short, unsigned short&rang;&rang;(unsigned short const&, unsigned short const&, std::__2::__less&lang;unsigned short, unsigned short&rang;) &rArr; std::__2::__less&lang;unsigned short, unsigned short&rang;::operator()[abi:v16000](unsigned short const&, unsigned short const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned short const& std::__2::min[abi:v16000]&lang;unsigned short&rang;(unsigned short const&, unsigned short const&)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::Read()
</UL>

<P><STRONG><a name="[1db]"></a>sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::Read()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lib_power_ctrl.o(.text._ZN7sheriff10RingBufferIfLt16EE4ReadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::Read() &rArr; sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::Read(float*, unsigned short) &rArr; unsigned short const& std::__2::min[abi:v16000]&lang;unsigned short&rang;(unsigned short const&, unsigned short const&) &rArr; unsigned short const& std::__2::min[abi:v16000]&lang;unsigned short, std::__2::__less&lang;unsigned short, unsigned short&rang;&rang;(unsigned short const&, unsigned short const&, std::__2::__less&lang;unsigned short, unsigned short&rang;) &rArr; std::__2::__less&lang;unsigned short, unsigned short&rang;::operator()[abi:v16000](unsigned short const&, unsigned short const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::Read(float*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sheriff::SlidingWindow&lang;float, 16u&rang;::operator&lang;&lang;(float const&)
</UL>

<P><STRONG><a name="[1dc]"></a>sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::Write(float const*, unsigned short)</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, lib_power_ctrl.o(.text._ZN7sheriff10RingBufferIfLt16EE5WriteEPKft))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::Write(float const*, unsigned short) &rArr; unsigned short const& std::__2::min[abi:v16000]&lang;unsigned short&rang;(unsigned short const&, unsigned short const&) &rArr; unsigned short const& std::__2::min[abi:v16000]&lang;unsigned short, std::__2::__less&lang;unsigned short, unsigned short&rang;&rang;(unsigned short const&, unsigned short const&, std::__2::__less&lang;unsigned short, unsigned short&rang;) &rArr; std::__2::__less&lang;unsigned short, unsigned short&rang;::operator()[abi:v16000](unsigned short const&, unsigned short const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned short const& std::__2::min[abi:v16000]&lang;unsigned short&rang;(unsigned short const&, unsigned short const&)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::Write(float const&)
</UL>

<P><STRONG><a name="[1dd]"></a>sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::Write(float const&)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lib_power_ctrl.o(.text._ZN7sheriff10RingBufferIfLt16EE5WriteERKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::Write(float const&) &rArr; sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::Write(float const*, unsigned short) &rArr; unsigned short const& std::__2::min[abi:v16000]&lang;unsigned short&rang;(unsigned short const&, unsigned short const&) &rArr; unsigned short const& std::__2::min[abi:v16000]&lang;unsigned short, std::__2::__less&lang;unsigned short, unsigned short&rang;&rang;(unsigned short const&, unsigned short const&, std::__2::__less&lang;unsigned short, unsigned short&rang;) &rArr; std::__2::__less&lang;unsigned short, unsigned short&rang;::operator()[abi:v16000](unsigned short const&, unsigned short const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::Write(float const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sheriff::SlidingWindow&lang;float, 16u&rang;::operator&lang;&lang;(float const&)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sheriff::SlidingWindow&lang;float, 16u&rang;::SlidingWindow__sub_object()
</UL>

<P><STRONG><a name="[1de]"></a>sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::RingBuffer__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lib_power_ctrl.o(.text._ZN7sheriff10RingBufferIfLt16EEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::RingBuffer__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sheriff::SlidingWindow&lang;float, 16u&rang;::SlidingWindow__sub_object()
</UL>

<P><STRONG><a name="[1df]"></a>sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::operator[](unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lib_power_ctrl.o(.text._ZN7sheriff10RingBufferIfLt16EEixEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::operator[](unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sheriff::SlidingWindow&lang;float, 16u&rang;::operator[](unsigned int)
</UL>

<P><STRONG><a name="[17c]"></a>sheriff::SlidingWindow&lang;float, 16u&rang;::SlidingWindow__sub_object()</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, lib_power_ctrl.o(.text._ZN7sheriff13SlidingWindowIfLj16EEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = sheriff::SlidingWindow&lang;float, 16u&rang;::SlidingWindow__sub_object() &rArr; sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::Write(float const&) &rArr; sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::Write(float const*, unsigned short) &rArr; unsigned short const& std::__2::min[abi:v16000]&lang;unsigned short&rang;(unsigned short const&, unsigned short const&) &rArr; unsigned short const& std::__2::min[abi:v16000]&lang;unsigned short, std::__2::__less&lang;unsigned short, unsigned short&rang;&rang;(unsigned short const&, unsigned short const&, std::__2::__less&lang;unsigned short, unsigned short&rang;) &rArr; std::__2::__less&lang;unsigned short, unsigned short&rang;::operator()[abi:v16000](unsigned short const&, unsigned short const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::Write(float const&)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::RingBuffer__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[17e]"></a>sheriff::SlidingWindow&lang;float, 16u&rang;::operator[](unsigned int)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lib_power_ctrl.o(.text._ZN7sheriff13SlidingWindowIfLj16EEixEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sheriff::SlidingWindow&lang;float, 16u&rang;::operator[](unsigned int) &rArr; sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::operator[](unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::operator[](unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[17f]"></a>sheriff::SlidingWindow&lang;float, 16u&rang;::operator&lang;&lang;(float const&)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lib_power_ctrl.o(.text._ZN7sheriff13SlidingWindowIfLj16EElsERKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = sheriff::SlidingWindow&lang;float, 16u&rang;::operator&lang;&lang;(float const&) &rArr; sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::Read() &rArr; sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::Read(float*, unsigned short) &rArr; unsigned short const& std::__2::min[abi:v16000]&lang;unsigned short&rang;(unsigned short const&, unsigned short const&) &rArr; unsigned short const& std::__2::min[abi:v16000]&lang;unsigned short, std::__2::__less&lang;unsigned short, unsigned short&rang;&rang;(unsigned short const&, unsigned short const&, std::__2::__less&lang;unsigned short, unsigned short&rang;) &rArr; std::__2::__less&lang;unsigned short, unsigned short&rang;::operator()[abi:v16000](unsigned short const&, unsigned short const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::Read()
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::Write(float const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[1d6]"></a>std::initializer_list&lang;UI::Shape*&rang;::end[abi:v16000]() const</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, app_ui.o(.text._ZNKSt16initializer_listIPN2UI5ShapeEE3endB6v16000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::initializer_list&lang;UI::Shape*&rang;::end[abi:v16000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Layer::Layer__sub_object(char const*, unsigned char, std::initializer_list&lang;UI::Shape*&rang;)
</UL>

<P><STRONG><a name="[1d5]"></a>std::initializer_list&lang;UI::Shape*&rang;::begin[abi:v16000]() const</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, app_ui.o(.text._ZNKSt16initializer_listIPN2UI5ShapeEE5beginB6v16000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::initializer_list&lang;UI::Shape*&rang;::begin[abi:v16000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Layer::Layer__sub_object(char const*, unsigned char, std::initializer_list&lang;UI::Shape*&rang;)
</UL>

<P><STRONG><a name="[1e1]"></a>std::__2::__less&lang;unsigned short, unsigned short&rang;::operator()[abi:v16000](unsigned short const&, unsigned short const&) const</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, lib_power_ctrl.o(.text._ZNKSt3__26__lessIttEclB6v16000ERKtS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = std::__2::__less&lang;unsigned short, unsigned short&rang;::operator()[abi:v16000](unsigned short const&, unsigned short const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned short const& std::__2::min[abi:v16000]&lang;unsigned short, std::__2::__less&lang;unsigned short, unsigned short&rang;&rang;(unsigned short const&, unsigned short const&, std::__2::__less&lang;unsigned short, unsigned short&rang;)
</UL>

<P><STRONG><a name="[1da]"></a>unsigned short const& std::__2::min[abi:v16000]&lang;unsigned short&rang;(unsigned short const&, unsigned short const&)</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, lib_power_ctrl.o(.text._ZNSt3__23minB6v16000ItEERKT_S3_S3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = unsigned short const& std::__2::min[abi:v16000]&lang;unsigned short&rang;(unsigned short const&, unsigned short const&) &rArr; unsigned short const& std::__2::min[abi:v16000]&lang;unsigned short, std::__2::__less&lang;unsigned short, unsigned short&rang;&rang;(unsigned short const&, unsigned short const&, std::__2::__less&lang;unsigned short, unsigned short&rang;) &rArr; std::__2::__less&lang;unsigned short, unsigned short&rang;::operator()[abi:v16000](unsigned short const&, unsigned short const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned short const& std::__2::min[abi:v16000]&lang;unsigned short, std::__2::__less&lang;unsigned short, unsigned short&rang;&rang;(unsigned short const&, unsigned short const&, std::__2::__less&lang;unsigned short, unsigned short&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::Read(float*, unsigned short)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sheriff::RingBuffer&lang;float, (unsigned short)16&rang;::Write(float const*, unsigned short)
</UL>

<P><STRONG><a name="[1e0]"></a>unsigned short const& std::__2::min[abi:v16000]&lang;unsigned short, std::__2::__less&lang;unsigned short, unsigned short&rang;&rang;(unsigned short const&, unsigned short const&, std::__2::__less&lang;unsigned short, unsigned short&rang;)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lib_power_ctrl.o(.text._ZNSt3__23minB6v16000ItNS_6__lessIttEEEERKT_S5_S5_T0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = unsigned short const& std::__2::min[abi:v16000]&lang;unsigned short, std::__2::__less&lang;unsigned short, unsigned short&rang;&rang;(unsigned short const&, unsigned short const&, std::__2::__less&lang;unsigned short, unsigned short&rang;) &rArr; std::__2::__less&lang;unsigned short, unsigned short&rang;::operator()[abi:v16000](unsigned short const&, unsigned short const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__less&lang;unsigned short, unsigned short&rang;::operator()[abi:v16000](unsigned short const&, unsigned short const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned short const& std::__2::min[abi:v16000]&lang;unsigned short&rang;(unsigned short const&, unsigned short const&)
</UL>

<P><STRONG><a name="[1e8]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>

<P><STRONG><a name="[1e5]"></a>buff2float</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lib_buff.o(.text.buff2float))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = buff2float
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_cap_data_2
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_cap_data_1
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_imu_yaw
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_control
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_referee_data_1
</UL>

<P><STRONG><a name="[1e6]"></a>buff2i16</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lib_buff.o(.text.buff2i16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = buff2i16
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_ui_state
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_cha_ref
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_referee_data_2
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_referee_data_1
</UL>

<P><STRONG><a name="[1e7]"></a>buff2ui16</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lib_buff.o(.text.buff2ui16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = buff2ui16
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_referee_data_1
</UL>

<P><STRONG><a name="[1e2]"></a>float2buff</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, lib_buff.o(.text.float2buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = float2buff
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_cap_mode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_referee_data_1
</UL>

<P><STRONG><a name="[1e3]"></a>i162buff</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, lib_buff.o(.text.i162buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i162buff
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_referee_data_2
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_referee_data_1
</UL>

<P><STRONG><a name="[a7]"></a>main</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + Unknown Stack Size
<LI>Call Chain = main &rArr; MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM15_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN3_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN2_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d3]"></a>osDelay</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, cmsis_os.o(.text.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeModeStr(UI::String&, char const*, unsigned short)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Update
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Refresh
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Task
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Task
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_Task
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Task
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Task
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
</UL>

<P><STRONG><a name="[1ea]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(.text.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16c]"></a>osThreadCreate</STRONG> (Thumb, 172 bytes, Stack size 80 bytes, cmsis_os.o(.text.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[164]"></a>pcTaskGetName</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tasks.o(.text.pcTaskGetName))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pcTaskGetName
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
</UL>

<P><STRONG><a name="[1ff]"></a>pvPortMalloc</STRONG> (Thumb, 492 bytes, Stack size 48 bytes, heap_4.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1fd]"></a>pxPortInitialiseStack</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1e4]"></a>ui162buff</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, lib_buff.o(.text.ui162buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ui162buff
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_referee_data_1
</UL>

<P><STRONG><a name="[17b]"></a>__cxa_guard_acquire</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __cxa_guard_acquire &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[17d]"></a>__cxa_guard_release</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_release))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[1f1]"></a>uxListRemove</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, list.o(.text.uxListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[204]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, app_freertos.o(.text.vApplicationGetIdleTaskMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vApplicationGetIdleTaskMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1fe]"></a>vListInitialise</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, list.o(.text.vListInitialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[1fc]"></a>vListInitialiseItem</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1f3]"></a>vListInsert</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1f2]"></a>vListInsertEnd</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, list.o(.text.vListInsertEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1f5]"></a>vPortEnterCritical</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1f7]"></a>vPortExitCritical</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1fa]"></a>vPortFree</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, heap_4.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[207]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, port.o(.text.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1eb]"></a>vTaskDelay</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tasks.o(.text.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[1ec]"></a>vTaskStartScheduler</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, tasks.o(.text.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[166]"></a>vTaskSuspend</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, tasks.o(.text.vTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskSuspend &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
</UL>

<P><STRONG><a name="[200]"></a>vTaskSuspendAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetHandle
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[99]"></a>vTaskSwitchContext</STRONG> (Thumb, 190 bytes, Stack size 20 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[205]"></a>xPortStartScheduler</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, port.o(.text.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = xPortStartScheduler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPortStartFirstTask
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnableVFP
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1ef]"></a>xTaskCreate</STRONG> (Thumb, 158 bytes, Stack size 64 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[1ee]"></a>xTaskCreateStatic</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, tasks.o(.text.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[165]"></a>xTaskGetHandle</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, tasks.o(.text.xTaskGetHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = xTaskGetHandle &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSearchForNameWithinSingleList
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
</UL>

<P><STRONG><a name="[18f]"></a>xTaskIncrementTick</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[203]"></a>xTaskResumeAll</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetHandle
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[20f]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[1c7]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos[abi:v16000](float)
</UL>

<P><STRONG><a name="[1c9]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin[abi:v16000](float)
</UL>

<P><STRONG><a name="[1ca]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt[abi:v16000](float)
</UL>

<P><STRONG><a name="[20e]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[20d]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[210]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[20c]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[188]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictPower
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_CalcWheelRef()
</UL>

<P><STRONG><a name="[211]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1cd]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_CalcWheelRef()
</UL>

<P><STRONG><a name="[214]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[218]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[25c]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)

<P><STRONG><a name="[217]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dneq
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deq
</UL>

<P><STRONG><a name="[1cc]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_CalcWheelRef()
</UL>

<P><STRONG><a name="[25d]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[25e]"></a>__aeabi_cdcmpge</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)

<P><STRONG><a name="[219]"></a>_dcmpge</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgeq
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgr
</UL>

<P><STRONG><a name="[25f]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[21a]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dls
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dleq
</UL>

<P><STRONG><a name="[260]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[187]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictPower
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_CalcWheelRef()
</UL>

<P><STRONG><a name="[21b]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[213]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[216]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[261]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[21c]"></a>_dsub</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictPower
</UL>

<P><STRONG><a name="[21e]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[262]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[220]"></a>_deq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[221]"></a>_dneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[186]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictPower
</UL>

<P><STRONG><a name="[222]"></a>_dgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_dcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictPower
</UL>

<P><STRONG><a name="[223]"></a>_dgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[263]"></a>__aeabi_dcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[224]"></a>_dleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[264]"></a>__aeabi_dcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[225]"></a>_dls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[21f]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[a0]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[265]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[266]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[212]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[10a]"></a>FDCAN_CalcultateRamBlockAddresses</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, stm32g4xx_hal_fdcan.o(.text.FDCAN_CalcultateRamBlockAddresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FDCAN_CalcultateRamBlockAddresses
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
</UL>

<P><STRONG><a name="[fc]"></a>FDCAN_CopyMessageToRAM</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, stm32g4xx_hal_fdcan.o(.text.FDCAN_CopyMessageToRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FDCAN_CopyMessageToRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_AddMessageToTxFifoQ
</UL>

<P><STRONG><a name="[12b]"></a>RCC_GetSysClockFreqFromPLLSource</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32g4xx_hal_rcc.o(.text.RCC_GetSysClockFreqFromPLLSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_GetSysClockFreqFromPLLSource
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[f8]"></a>DMA_CalcDMAMUXChannelBaseAndMask</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32g4xx_hal_dma.o(.text.DMA_CalcDMAMUXChannelBaseAndMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[f9]"></a>DMA_CalcDMAMUXRequestGenBaseAndMask</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32g4xx_hal_dma.o(.text.DMA_CalcDMAMUXRequestGenBaseAndMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CalcDMAMUXRequestGenBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[fb]"></a>DMA_SetConfig</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32g4xx_hal_dma.o(.text.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[123]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32g4xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[120]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[121]"></a>NVIC_EncodePriority</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32g4xx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[122]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32g4xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[11f]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, stm32g4xx_hal_cortex.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[134]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32g4xx_hal_tim.o(.text.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[135]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32g4xx_hal_tim.o(.text.TIM_ITRx_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[136]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32g4xx_hal_tim.o(.text.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[6c]"></a>UART_DMAError</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32g4xx_hal_uart.o(.text.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = UART_DMAError &rArr; HAL_UART_ErrorCallback &rArr; Referee_Init &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(.text.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[192]"></a>UART_EndTxTransfer</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, stm32g4xx_hal_uart.o(.text.UART_EndTxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_EndTxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[14d]"></a>UART_EndRxTransfer</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(.text.UART_EndRxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[6a]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(.text.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_DMAReceiveCplt &rArr; HAL_UARTEx_RxEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(.text.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[6b]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(.text.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_DMARxHalfCplt &rArr; HAL_UARTEx_RxEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(.text.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[69]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = UART_DMAAbortOnError &rArr; HAL_UART_ErrorCallback &rArr; Referee_Init &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[152]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(.text.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32g4xx_hal_uart_ex.o(.text.UARTEx_SetNbDataToProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
</UL>

<P><STRONG><a name="[1fb]"></a>prvInitialiseNewTask</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, tasks.o(.text.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[1f4]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, tasks.o(.text.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[1f6]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, tasks.o(.text.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1f9]"></a>prvDeleteTCB</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tasks.o(.text.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[206]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, tasks.o(.text.prvResetNextTaskUnblockTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1f0]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, tasks.o(.text.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[6e]"></a>prvIdleTask</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tasks.o(.text.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[1f8]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(.text.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[20b]"></a>prvSearchForNameWithinSingleList</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, tasks.o(.text.prvSearchForNameWithinSingleList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvSearchForNameWithinSingleList
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetHandle
</UL>

<P><STRONG><a name="[1ed]"></a>makeFreeRtosPriority</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cmsis_os.o(.text.makeFreeRtosPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = makeFreeRtosPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[201]"></a>prvHeapInit</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, heap_4.o(.text.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[202]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 198 bytes, Stack size 12 bytes, heap_4.o(.text.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[6d]"></a>prvTaskExitError</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[208]"></a>vPortEnableVFP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(.text.vPortEnableVFP))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[209]"></a>prvPortStartFirstTask</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, port.o(.text.prvPortStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[160]"></a>Init_AllMotors</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, config_ctrl.o(.text.Init_AllMotors))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Init_AllMotors &rArr; Motor_InitGroup &rArr; FDCAN_InitTxHander
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_InitGroup
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_All
</UL>

<P><STRONG><a name="[174]"></a>Chassis_CalcMoveRef()</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, app_chassis.o(.text._ZL19Chassis_CalcMoveRefv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Chassis_CalcMoveRef() &rArr; sin[abi:v16000](float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos[abi:v16000](float)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin[abi:v16000](float)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_GetControlPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OmmiChassis_Output
</UL>

<P><STRONG><a name="[175]"></a>Chassis_CalcOmmiFollowRef()</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, app_chassis.o(.text._ZL25Chassis_CalcOmmiFollowRefv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Chassis_CalcOmmiFollowRef() &rArr; PID_Calc &rArr; Filter_Lowpass
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs[abi:v16000](float)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetRef
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Consequent_To_180
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Calc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetFdb
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalYaw_GetControlPtr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_GetControlPtr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_GetDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OmmiChassis_Output
</UL>

<P><STRONG><a name="[176]"></a>Chassis_CalcWheelRef()</STRONG> (Thumb, 604 bytes, Stack size 64 bytes, app_chassis.o(.text._ZL20Chassis_CalcWheelRefv))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Chassis_CalcWheelRef() &rArr; ConstrainedGyroVelocity(float*, float, float, float) &rArr; fabs[abi:v16000](float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetRef
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetRef
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_GetDataPtr
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstrainedGyroVelocity(float*, float, float, float)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstrainedTranslationVelocity(float*, float, float, float, float)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_GetControlPtr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_GetDataPtr
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OmmiChassis_Output
</UL>

<P><STRONG><a name="[1a5]"></a>__cxx_global_var_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, app_ui.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __cxx_global_var_init &rArr; UI::Rectangle::Rectangle__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Rectangle::Rectangle__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1a6]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, app_ui.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __cxx_global_var_init.1 &rArr; UI::Rectangle::Rectangle__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Rectangle::Rectangle__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1a7]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, app_ui.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __cxx_global_var_init.2 &rArr; UI::Rectangle::Rectangle__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Rectangle::Rectangle__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1a8]"></a>__cxx_global_var_init.3</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, app_ui.o(.text.__cxx_global_var_init.3))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __cxx_global_var_init.3 &rArr; UI::Rectangle::Rectangle__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Rectangle::Rectangle__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1a9]"></a>__cxx_global_var_init.4</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, app_ui.o(.text.__cxx_global_var_init.4))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __cxx_global_var_init.4 &rArr; UI::Rectangle::Rectangle__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Rectangle::Rectangle__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1aa]"></a>__cxx_global_var_init.5</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, app_ui.o(.text.__cxx_global_var_init.5))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __cxx_global_var_init.5 &rArr; UI::Rectangle::Rectangle__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Rectangle::Rectangle__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1ab]"></a>__cxx_global_var_init.6</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, app_ui.o(.text.__cxx_global_var_init.6))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __cxx_global_var_init.6 &rArr; UI::Rectangle::Rectangle__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Rectangle::Rectangle__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1ac]"></a>__cxx_global_var_init.7</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, app_ui.o(.text.__cxx_global_var_init.7))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __cxx_global_var_init.7 &rArr; UI::Int::Int__sub_object(UI::Color, unsigned char, UI::Shape::XY, unsigned short, int) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Int::Int__sub_object(UI::Color, unsigned char, UI::Shape::XY, unsigned short, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1ad]"></a>__cxx_global_var_init.8</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, app_ui.o(.text.__cxx_global_var_init.8))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = __cxx_global_var_init.8 &rArr; UI::Float::Float__sub_object(UI::Color, unsigned char, UI::Shape::XY, unsigned short, float) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Float::Float__sub_object(UI::Color, unsigned char, UI::Shape::XY, unsigned short, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1ae]"></a>__cxx_global_var_init.9</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, app_ui.o(.text.__cxx_global_var_init.9))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = __cxx_global_var_init.9 &rArr; UI::Float::Float__sub_object(UI::Color, unsigned char, UI::Shape::XY, unsigned short, float) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Float::Float__sub_object(UI::Color, unsigned char, UI::Shape::XY, unsigned short, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1af]"></a>__cxx_global_var_init.10</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, app_ui.o(.text.__cxx_global_var_init.10))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = __cxx_global_var_init.10 &rArr; UI::Float::Float__sub_object(UI::Color, unsigned char, UI::Shape::XY, unsigned short, float) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Float::Float__sub_object(UI::Color, unsigned char, UI::Shape::XY, unsigned short, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1b0]"></a>__cxx_global_var_init.11</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, app_ui.o(.text.__cxx_global_var_init.11))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __cxx_global_var_init.11 &rArr; UI::Line::Line__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Line::Line__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1b1]"></a>__cxx_global_var_init.12</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, app_ui.o(.text.__cxx_global_var_init.12))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __cxx_global_var_init.12 &rArr; UI::Line::Line__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Line::Line__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1b2]"></a>__cxx_global_var_init.13</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, app_ui.o(.text.__cxx_global_var_init.13))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __cxx_global_var_init.13 &rArr; UI::Line::Line__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Line::Line__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1b3]"></a>__cxx_global_var_init.14</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, app_ui.o(.text.__cxx_global_var_init.14))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __cxx_global_var_init.14 &rArr; UI::Line::Line__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Line::Line__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1b4]"></a>__cxx_global_var_init.15</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, app_ui.o(.text.__cxx_global_var_init.15))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __cxx_global_var_init.15 &rArr; UI::Line::Line__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Line::Line__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1b5]"></a>__cxx_global_var_init.16</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, app_ui.o(.text.__cxx_global_var_init.16))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __cxx_global_var_init.16 &rArr; UI::Line::Line__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Line::Line__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1b6]"></a>__cxx_global_var_init.17</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, app_ui.o(.text.__cxx_global_var_init.17))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __cxx_global_var_init.17 &rArr; UI::Line::Line__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Line::Line__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1b7]"></a>__cxx_global_var_init.18</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, app_ui.o(.text.__cxx_global_var_init.18))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __cxx_global_var_init.18 &rArr; UI::Line::Line__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Line::Line__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1b8]"></a>__cxx_global_var_init.19</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, app_ui.o(.text.__cxx_global_var_init.19))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __cxx_global_var_init.19 &rArr; UI::Line::Line__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Line::Line__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1b9]"></a>__cxx_global_var_init.20</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, app_ui.o(.text.__cxx_global_var_init.20))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __cxx_global_var_init.20 &rArr; UI::Line::Line__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Line::Line__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1ba]"></a>__cxx_global_var_init.21</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, app_ui.o(.text.__cxx_global_var_init.21))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __cxx_global_var_init.21 &rArr; UI::Line::Line__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Line::Line__sub_object(UI::Color, unsigned char, UI::Shape::XY, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1bb]"></a>__cxx_global_var_init.22</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, app_ui.o(.text.__cxx_global_var_init.22))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = __cxx_global_var_init.22 &rArr; UI::Layer::Layer__sub_object(char const*, unsigned char, std::initializer_list&lang;UI::Shape*&rang;) &rArr; std::initializer_list&lang;UI::Shape*&rang;::end[abi:v16000]() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Layer::Layer__sub_object(char const*, unsigned char, std::initializer_list&lang;UI::Shape*&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1bc]"></a>__cxx_global_var_init.23</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, app_ui.o(.text.__cxx_global_var_init.23))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = __cxx_global_var_init.23 &rArr; UI::Layer::Layer__sub_object(char const*, unsigned char, std::initializer_list&lang;UI::Shape*&rang;) &rArr; std::initializer_list&lang;UI::Shape*&rang;::end[abi:v16000]() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Layer::Layer__sub_object(char const*, unsigned char, std::initializer_list&lang;UI::Shape*&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1bd]"></a>__cxx_global_var_init.25</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, app_ui.o(.text.__cxx_global_var_init.25))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = __cxx_global_var_init.25 &rArr; UI::Layer::Layer__sub_object(char const*, unsigned char, std::initializer_list&lang;UI::Shape*&rang;) &rArr; std::initializer_list&lang;UI::Shape*&rang;::end[abi:v16000]() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Layer::Layer__sub_object(char const*, unsigned char, std::initializer_list&lang;UI::Shape*&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1be]"></a>__cxx_global_var_init.28</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, app_ui.o(.text.__cxx_global_var_init.28))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = __cxx_global_var_init.28 &rArr; UI::Layer::Layer__sub_object(char const*, unsigned char, std::initializer_list&lang;UI::Shape*&rang;) &rArr; std::initializer_list&lang;UI::Shape*&rang;::end[abi:v16000]() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::Layer::Layer__sub_object(char const*, unsigned char, std::initializer_list&lang;UI::Shape*&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1bf]"></a>__cxx_global_var_init.31</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, app_ui.o(.text.__cxx_global_var_init.31))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __cxx_global_var_init.31 &rArr; UI::String::String__sub_object(char const*, unsigned char, UI::Color, unsigned short, unsigned char, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::String::String__sub_object(char const*, unsigned char, UI::Color, unsigned short, unsigned char, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1c0]"></a>__cxx_global_var_init.33</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, app_ui.o(.text.__cxx_global_var_init.33))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __cxx_global_var_init.33 &rArr; UI::String::String__sub_object(char const*, unsigned char, UI::Color, unsigned short, unsigned char, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::String::String__sub_object(char const*, unsigned char, UI::Color, unsigned short, unsigned char, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1c1]"></a>__cxx_global_var_init.35</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, app_ui.o(.text.__cxx_global_var_init.35))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __cxx_global_var_init.35 &rArr; UI::String::String__sub_object(char const*, unsigned char, UI::Color, unsigned short, unsigned char, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::String::String__sub_object(char const*, unsigned char, UI::Color, unsigned short, unsigned char, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1c2]"></a>__cxx_global_var_init.37</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, app_ui.o(.text.__cxx_global_var_init.37))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __cxx_global_var_init.37 &rArr; UI::String::String__sub_object(char const*, unsigned char, UI::Color, unsigned short, unsigned char, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::String::String__sub_object(char const*, unsigned char, UI::Color, unsigned short, unsigned char, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[1c3]"></a>__cxx_global_var_init.39</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, app_ui.o(.text.__cxx_global_var_init.39))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __cxx_global_var_init.39 &rArr; UI::String::String__sub_object(char const*, unsigned char, UI::Color, unsigned short, unsigned char, UI::Shape::XY) &rArr; UI::Shape::Shape__sub_object(UI::Color, unsigned char, UI::Shape::XY)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::String::String__sub_object(char const*, unsigned char, UI::Color, unsigned short, unsigned char, UI::Shape::XY)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_app_ui.cpp
</UL>

<P><STRONG><a name="[8b]"></a>_GLOBAL__sub_I_app_ui.cpp</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, app_ui.o(.text._GLOBAL__sub_I_app_ui.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _GLOBAL__sub_I_app_ui.cpp &rArr; __cxx_global_var_init.28 &rArr; UI::Layer::Layer__sub_object(char const*, unsigned char, std::initializer_list&lang;UI::Shape*&rang;) &rArr; std::initializer_list&lang;UI::Shape*&rang;::end[abi:v16000]() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.39
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.37
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.35
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.33
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.31
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.28
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.25
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.23
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.22
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.21
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.20
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.19
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.18
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.17
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.16
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.15
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.14
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.13
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.12
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.11
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.10
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.9
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.8
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ui.o(.init_array)
</UL>
<P><STRONG><a name="[97]"></a>M3508_Decode</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, protocol_motor.o(.text.M3508_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M3508_Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_motor.o(.data.Chassis_MotorDecodeTable)
</UL>
<P><STRONG><a name="[98]"></a>GM6020_Decode</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, protocol_motor.o(.text.GM6020_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GM6020_Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_motor.o(.data.Chassis_MotorDecodeTable)
</UL>
<P><STRONG><a name="[94]"></a>_send_referee_data_1</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, protocol_board.o(.text._send_referee_data_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _send_referee_data_1 &rArr; FDCAN_Send &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui162buff
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i162buff
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2buff
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_Send
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_GetDataPtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_board.o(.data.Cha_Send)
</UL>
<P><STRONG><a name="[95]"></a>_send_referee_data_2</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, protocol_board.o(.text._send_referee_data_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _send_referee_data_2 &rArr; FDCAN_Send &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i162buff
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_Send
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_GetDataPtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_board.o(.data.Cha_Send)
</UL>
<P><STRONG><a name="[96]"></a>_send_cap_mode</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, protocol_board.o(.text._send_cap_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _send_cap_mode &rArr; FDCAN_Send &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2buff
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_Send
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_GetDataPtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_board.o(.data.Cha_Send)
</UL>
<P><STRONG><a name="[8e]"></a>_set_referee_data_1</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, protocol_board.o(.text._set_referee_data_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _set_referee_data_1 &rArr; buff2ui16
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff2ui16
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff2i16
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff2float
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_GetDataPtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_board.o(.data.Cha_Receive)
</UL>
<P><STRONG><a name="[8f]"></a>_set_referee_data_2</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, protocol_board.o(.text._set_referee_data_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _set_referee_data_2 &rArr; buff2i16
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff2i16
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_GetDataPtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_board.o(.data.Cha_Receive)
</UL>
<P><STRONG><a name="[90]"></a>_set_control</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, protocol_board.o(.text._set_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _set_control &rArr; BoardCom_ChassisModeSet &rArr; Chassis_SetMoveRef
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_ChassisModeSet
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff2float
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_GetDataPtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_board.o(.data.Cha_Receive)
</UL>
<P><STRONG><a name="[91]"></a>_set_imu_yaw</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, protocol_board.o(.text._set_imu_yaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _set_imu_yaw &rArr; buff2float
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff2float
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_GetDataPtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_board.o(.data.Cha_Receive)
</UL>
<P><STRONG><a name="[92]"></a>_set_cha_ref</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, protocol_board.o(.text._set_cha_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _set_cha_ref &rArr; buff2i16
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff2i16
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_GetDataPtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_board.o(.data.Cha_Receive)
</UL>
<P><STRONG><a name="[93]"></a>_set_ui_state</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, protocol_board.o(.text._set_ui_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _set_ui_state &rArr; buff2i16
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff2i16
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_GetDataPtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_board.o(.data.Cha_Receive)
</UL>
<P><STRONG><a name="[8c]"></a>_set_cap_data_1</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, protocol_board.o(.text._set_cap_data_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _set_cap_data_1 &rArr; buff2float
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff2float
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_GetDataPtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_board.o(.data.Cap_Receive)
</UL>
<P><STRONG><a name="[8d]"></a>_set_cap_data_2</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, protocol_board.o(.text._set_cap_data_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _set_cap_data_2 &rArr; buff2float
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff2float
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCom_GetDataPtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_board.o(.data.Cap_Receive)
</UL>
<P><STRONG><a name="[21d]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[215]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
